% for diploids, a nonlinear model and analysis

iterations = 1000;

s_val = 2e-7; % starting s value

mu_val = 5e-8; % constant value of forward mutation rate
nu_val = 1e-9; % constant value of backward mutation rate
mut_ratio_val = mu_val/nu_val; % ratio of forward to backward mutation rate
h_val = 1; % h1 dominance coefficient value, constant

syms s q G0 G1 G2 g0 g1 h mu nu

% assumptions on the parameters of the model; theoretical bounds
assume(g0>=0 & g0<=1);
assume(g1>=0 & g1<=1);
assume(s>=-1 & s<=1);
assume(h>=0 & h<=1);
assume(mu>=0 & mu<=1);
assume(nu>=0 & nu<=1);
assume(G0>=0 & G0<=1);
assume(G1>=0 & G1<=1);
assume(G2>=0 & G2<=1);

%%% g0 is q and g1 is p

% equations to parameterize relative fitnesses
w_bar = 1 - s*(h*2*g0*g1 + g1^2);
w0 = 1;
w1 = (1-s*h);
w2 = (1-s);

% equations for selection
sel_g0 = w1*g1*g0 + w0*g0^2; 
sel_g1 = w2*g1^2 + w1*g1*g0;

% equations for mutation
mut_g0 = sel_g0*(1-mu) + sel_g1*nu - g0*w_bar;
mut_g1 = sel_g0*mu + sel_g1*(1-nu) - g1*w_bar;

% substitution to remove g1
mut_g0 = subs(mut_g0, g1, 1-g0);

mut_g0 = simplify(expand(mut_g0));

%returns a list of symbolic coefficients of g0 from lowest order to highest
coefficients = coeffs(mut_g0, g0);

%flips order of symbolic coefficients to be from highest to lowest order
coefficients = fliplr(coefficients);

%defines components of the cubic formula
delta_0 = coefficients(2)^2 - 3*coefficients(1)*coefficients(3);
delta_1 = 2*coefficients(2)^3 - 9*coefficients(1)*coefficients(2)*coefficients(3) + 27*coefficients(1)^2*coefficients(4);

%calculates the "determinant" of the cubic equation



function [diff_eqn_value] = diff_eqn_eval(mut_exp_g0, mu, mu_value, nu, nu_value, s, s_value, h, h_value, g0, g0_sub_value)

    diff_eqn_value = subs(mut_exp_g0, mu, mu_value);
    diff_eqn_value = subs(diff_eqn_value, nu, nu_value);
    diff_eqn_value = subs(diff_eqn_value, s, s_value);
    diff_eqn_value = subs(diff_eqn_value, h, h_value);
    diff_eqn_value = subs(diff_eqn_value, g0, g0_sub_value);
end

function [soln] = numeric_solver(mut_exp_g0, mu, mu_value, nu, nu_value, s, s_value, h, h_value, g0)

    sub_eqn = subs(mut_exp_g0, mu, mu_value);
    sub_eqn = subs(sub_eqn, nu, nu_value);
    sub_eqn = subs(sub_eqn, s, s_value);
    sub_eqn = subs(sub_eqn, h, h_value);
    
    soln = vpasolve(sub_eqn, g0);
end
